<%
const { routeInfo, utils } = it;
const {
  operationId,
  method,
  route,
  moduleName,
  responsesTypes,
  description,
  tags,
  summary,
  pathArgs,
} = routeInfo;
const { _, fmtToJSDocLine, require } = utils;

const DICTIONARY = {
  companies: 'company',
  users: 'user',
  relatives: 'relative',
  educations: 'education',
  accounts: 'account',
  groups: 'group',
  invites: 'invite',
  notifications: 'notification',
  document_copies: 'documentCopy',
};

const SERVICE_PARTS= ['api', 'v1'];

const METHODS_DICTIONARY = {
  put: 'update',
  patch: 'update'
};

const isDynamic = (str)=> str.startsWith(‘{’);

const generateName = (
  route,
  method
) => {
  if (!route || !method) {
    return undefined;
  }

  const lower = route.toLowerCase();
  const lowerMethod = method.toLowerCase();
  let result = METHODS_DICTIONARY[lowerMethod] || lowerMethod;

  const routeParts = lower.split('/');
  for (let i = 0; i < routeParts.length; i++) {
    const part = routeParts[i];
    if (SERVICE_PARTS.includes(part) || isDynamic(part)) {
      continue;
    } else {
      const nextPart = routeParts[i + 1];
      if (nextPart && isDynamic(nextPart)) {
        result += `_${DICTIONARY[part] || part}`;
      } else {
        result += `_${part}`;
      }
    }
  }
  return _.camelCase(result);
}

const createCustomOperationId = (method, route, moduleName) => {
  const splitedRouteBySlash = _.compact(_.replace(route, /\{(\w){1,}\}/g, "").split("/"));
  const routeParts = (splitedRouteBySlash.length > 1
    ? splitedRouteBySlash.splice(1)
    : splitedRouteBySlash
  ).join("_");
  return routeParts.length > 3
    ? generateName(route, method)
    : _.camelCase(_.lowerCase(method) + "_" + [moduleName].join("_")) || "index";
};

if (operationId)
  return _.camelCase(operationId);
if (route === "/")
  return _.camelCase(`${_.lowerCase(method)}Root`);

return createCustomOperationId(method, route, moduleName);
%>